Introduction to databases
- DDL
- DML
- JOINS
- Normalisation

### what is a database
special software to store data.

### what is cloud?
- Renting a PC

### what is OS in Cloud?
- Linux :  Free, open-source, secure, smaller footprint, automation, 

#### why database?
- features
  - database - frequently asked it will have it in the ram
  - querying becomes easier -- Plain English
  - CRUD - easy
  - Backups are inbuilt
  - undo - easily (time limit) -- 1hr
  - performance

### Relational Databases(sql)
- PL/SQL
- Postgre SQL
- my SQL

- RDB(NoSQL)
 - mongoDB
 - CouchDB
 - redis + SQL
 - cassandra
 - dynamoDB
 - neo4j
## 1
``` sql
1. Find the title of each film
-  SELECT Title FROM movies;
2. Find the director of each film
- SELECT Director FROM movies;
3. Find the title and director of each film
- SELECT title,Director FROM movies;
4. Find the title and year of each film
- SELECT title,year FROM movies;
5. Find all the information about each film
- SELECT * FROM movies;
```
## 2
2. SELECT * FROM movies where year>=2000 and year<=2010
3. SELECT * FROM movies where year<2000 or year>2010;
4. SELECT title,year FROM movies where id >=1 and id<=5;

## 3
1. select * from movies where title like "%toy story%";
2. select * from movies where director like "john lasseter";
3. select title,director from movies where director not like "john lasseter";
4. SELECT * FROM movies where title LIKE "%WALL%";

## 4
1. SELECT distinct DIRECTOR FROM MOVIES ORDER BY  director asc;
2. SELECT * FROM movies order by year desc limit 4; 
3. SELECT * FROM movies order by title asc limit 5;
4. SELECT * FROM movies order by title asc limit 5 offset 5;

##5
1. SELECT city,country,population FROM north_american_cities where country like "canada";
2. SELECT * FROM north_american_cities where country like "united states" order by latitude desc;
3. SELECT * FROM north_american_cities order by longitude limit 6;
4. SELECT * FROM north_american_cities where country like "mexico" order by population desc limit 2;
5. SELECT * FROM north_american_cities where country like "united states" order by population desc limit 2 offset 2 

## 6
1. SELECT title, domestic_sales, international_sales 
FROM movies
  JOIN boxoffice
    ON movies.id = boxoffice.movie_id;
2. SELECT title, domestic_sales, international_sales
FROM movies
  JOIN boxoffice
    ON movies.id = boxoffice.movie_id
WHERE international_sales > domestic_sales;
3.SELECT title
FROM movies
  JOIN boxoffice
    ON movies.id = boxoffice.movie_id
order by rating desc;

## 7
1. SELECT DISTINCT building FROM employees;
2. SELECT * FROM buildings;
3. SELECT DISTINCT building_name, role 
FROM buildings 
  LEFT JOIN employees
    ON building_name = building;

## 9
1. SELECT title, (domestic_sales + international_sales)*0.0000001 AS gross_sales_millions
FROM movies
  JOIN boxoffice
    ON movies.id = boxoffice.movie_id;
2. SELECT title, rating * 10 AS rating_percent
FROM movies
  JOIN boxoffice
    ON movies.id = boxoffice.movie_id;
3. SELECT title, year
FROM movies
WHERE year % 2 = 0;

## 10
1. SELECT max(years_employed) FROM employees;
2. SELECT role,avg(years_employed) FROM employees group by role;
3. SELECT building, SUM(years_employed) as Total_years_employed
FROM employees
GROUP BY building;

## 11
1. SELECT role, COUNT(*) as Number_of_artists
FROM employees
WHERE role = "Artist";
2. SELECT role, COUNT(*)
FROM employees
GROUP BY role;
3. SELECT role, SUM(years_employed)
FROM employees
GROUP BY role
HAVING role = "Engineer";

## 12
1. 
SELECT director, COUNT(id) as Num_movies_directed
FROM movies
GROUP BY director;
2.SELECT director, SUM(domestic_sales + international_sales)
FROM movies JOIN boxoffice ON movies.id = boxoffice.movie_id
GROUP BY director;

## 13
1. INSERT INTO movies VALUES (4, "Toy Story 4", "nag aswin", 2024, 155);
2. INSERT INTO boxoffice VALUES (4, 8.7, 340000000, 270000000);

## 14
3. UPDATE movies
SET title = "Toy Story 3", director = "Lee Unkrich"
WHERE id = 11;

## 15
1. delete  from movies where year<2005
2. delete from movies 
where director="Andrew Stanton";


## task
selectÂ  name from salesman where city!='paris';